[{"categories":["Life"],"contents":"In October of 2021, I decided to switch from a WordPress-based blog to a Hugo-based site. I mean, how can I not?!\nI made a backup of my site. Set up my new site, and decided that it was a good time to review and update my site\u0026rsquo;s look and feel, and content.\nBut first, I had to prepare for the Microsoft 365 Conference in December, then the one in April.\nOf course, my WordPress subscription expired while I was in Vegas, and my old content wasn\u0026rsquo;t moved. \u0026ldquo;I\u0026rsquo;ll get to it when I get home\u0026rdquo;, I foolishly told myself.\n\u0026ldquo;I\u0026rsquo;ll get to it when I get home\u0026rdquo;\n\u0026ndash; A foolish me\nBut, shortly after I got home, I heard the good news that I got the new job of Community Program Manager for Power Pages (which was not yet announced).\nBetween then and my official start date in my new role, I\u0026rsquo;d have to start planning from my old role as a Senior Cloud Solution Architect; I\u0026rsquo;d also be helping (albeit in a non-official capacity) prepare for the launch of the new Microsoft Power Pages Community.\nOh, and somewhere during that whole time I was busy helping with the creation (and the migration) of the Microsoft 365 Platform Community Blog, adding development containers to the [SPFx Web Parts repository], and working on some new Sharing is Caring sessions.\nBut things are finally getting back to normal \u0026ndash; a little.\nTwo weeks ago was my first day in my new role. I had to travel to Seattle (for the first time in over 10 years) so I could meet my new team.\nCame back last week. Tested positive for COVID. Rested \u0026ndash; probably more than I have in many, many years \u0026ndash; and now I\u0026rsquo;m fixing my blog while fighting a fever (the pink elephants are telling me I\u0026rsquo;m doing a fine job, by the way).\nI\u0026rsquo;ll do my best to migrate all my old content \u0026ndash; starting with the most frequently-visited content first \u0026ndash; and keep the original URLs the same.\nBut until then, thank you for being patient.\nAlso, thank you for reaching out to tell me that my blog is down. I knew that people visited my blog (because I saw the traffic stats), but I never quite realized that those \u0026ldquo;visitors\u0026rdquo; on my site stats were from real people in the community.\nAnd I certainly never expected to receive so many messages from people telling me that they always rely on my site for so many things.\nFor something that started as a place to leave notes for myself, I am quite flattered that others find my ramblings useful.\nThank you! As I get back on my feet, so will the content on my blog!\nPhoto Credits Photo by Pierre Bamin on Unsplash\n","permalink":"https://hugoabernier.github.io/posts/migrating/","tags":null,"title":"Wait... where did all the content go?!"},{"categories":["Productivity"],"contents":"Introduction If you\u0026rsquo;ve ever tried to give a PowerPoint presentation and switch to your desktop to do a demo, you may have noticed that PowerPoint tends to fight with you to stay in slide show mode.\nSlide show mode shows your presentation in full screen, but it hides your cursor and captures your keyboard and mouse. If you want to get out of it to do your demo, you have to hit Esc, and Alt-Tab to your demo. Then you have to go back to your presentation, restart the slide show (and often restart at the first slide by mistake).\nUgh!\nYou usually end up fighting with Alt-Tab (and potentially reveal to your audience what other applications you\u0026rsquo;ve got running and/or show your private chats to the world \u0026ndash; like I\u0026rsquo;ve done), or end up showing your presentation in PowerPoint without using the slide show (I\u0026rsquo;m looking at you, Microsoft employees!)\nIn today\u0026rsquo;s post, I\u0026rsquo;ll explain how you can use the slide show mode and make it easy to switch back and forth between your demo and your presentation.\nAs a bonus, I\u0026rsquo;ll show you how you can also keep Teams open and monitor the chat window as you present.\nUsing Presenter Mode in PowerPoint First things first: use the slide show mode!!!. When you present to your audience, you\u0026rsquo;re competing for their attention and trying to get them to focus on what you\u0026rsquo;re showing. They\u0026rsquo;re already fighting to stay awake and will probably look at everything on your slides. If you\u0026rsquo;re just showing your slides in PowerPoint without the slide show mode, you\u0026rsquo;re making harder on your audience to focus and stay engaged. They see all the slides in your deck (\u0026ldquo;Oh my god, he\u0026rsquo;s got 37 slides! We\u0026rsquo;ll never get out of here!\u0026rdquo;), all the ribbons and buttons (\u0026ldquo;Ooh, I wander what the Design Ideas button does?!\u0026rdquo;), and you make the content on your slides smaller.\n(Just so we\u0026rsquo;re clear: this is not cool!)\nDon\u0026rsquo;t you want to be respectful to your audience and save them from boredom? They certainly want you to!\nTo launch your PowerPoint presentation in slide show mode, you just need to hit F5 from anywhere in your presentation. It\u0026rsquo;ll start your slides full-screen (unless you use a custom slide show, but that\u0026rsquo;s another story).\nIf you want to start from the current slide you\u0026rsquo;re editing, you can simply hit Shift-F5.\nTo get out of the slide show mode, hit Esc.\nSo far, this is probably obvious to you (except, maybe, if you\u0026rsquo;re a Microsoft employee, who apparently forget about the F5 key as soon as they join Microsoft üòä).\nThe hard part comes next: how to you easily switch between your slide show mode to your demo (without getting out of your slide show)?\nUsing Desktops As it turns out, the solution is built-in into Windows 10: just use desktops.\nTo get to desktops, just hit the Task View from your task bar.\nYou should begin with only one desktop. To create a new one, select + New desktop at the top of the Task View.\nOnce you have created your new desktop, your task view will allow you to switch back and forth between desktops.\nTo switch between desktops quickly, just use Ctrl-Win-‚Üí and Ctrl-Win-‚Üê to go to your next or previous desktops.\nNow that you know how to switch between desktops, let\u0026rsquo;s set them up for your presentation.\nSetting up the desktops I like to set up my desktops as follows:\nThe Default desktop is where I\u0026rsquo;ll run PowerPoint from. The Demo desktop is where the code that I\u0026rsquo;ll demo will be running from. NOTE: You can rename the desktops from the task view by clicking on their names and typing a new name\nDuring my presentation, I\u0026rsquo;ll launch PowerPoint is slide show mode on the default desktop; when I\u0026rsquo;m ready to show the demo, I\u0026rsquo;ll switch to my demo desktop without leaving the slide show mode!\nFor example, in this screen capture below, I go from my PowerPoint slide (which says \u0026ldquo;Demo\u0026rdquo;) to the web page containing the web parts I am demoing.\nSometimes I\u0026rsquo;ll add another desktop to pre-load Visual Studio Code, or one for each of my clients where I place all my windows related to a client so I don\u0026rsquo;t have to close all my apps before I start presenting.\nAll you need to do is to send your apps from the task view to another deskop.\nHere\u0026rsquo;s how\nFrom the Windows task bar, start the task view From the task view, right-click on an app you want to move between desktop Select Move to\u0026hellip; and select the name of the desktop where you want the app to appear. In my case, I\u0026rsquo;ll select Demo. That\u0026rsquo;s it!\nKeeping Teams visible on all desktops There is one disadvantage to using desktops: if you use Teams to connect to a meeting and watch the meeting video and/or chat window, and Teams is on your default desktop, it disappears when you switch to another desktop.\nThankfully, David Warner II \u0026ndash; who is the master of presentation tips \u0026ndash; there is a way you can make Teams (or any other apps) appear on all desktops, regardless of which one is currently displayed.\nTo do so, follow these steps:\nForm the task view, right-click on Teams (or the app you want to appear on all desktops) From the context menu, select Show this window on all desktops (or, if you want the window and all the pop-up chat windows and other dialog, select Show windows from this app on all desktops) When you switch desktops, Teams will remain visible!\nConclusion I hope that you\u0026rsquo;ll find slide show mode and desktops useful when doing your presentations.\nDo you use desktops in any other creative ways? Let us know in the comments.\nPhoto Credit Photo by Jeffrey Hamilton on Unsplash\n","permalink":"https://hugoabernier.github.io/posts/from-powerpoint-to-demos-easily-with-desktops/","tags":null,"title":"From PowerPoint to Demos Easily With Desktops"},{"categories":["Productivity"],"contents":"Find out how you create create shortcuts that will launch your Edge browser with a different profile. Bonus: find out how to configure your Stream Deck buttons to launch Edge, Teams, and conference calls using different browsers.\nIntroduction Ugh. I was useless today: my internet was down for most of the day and I was powerless.\nI tried to make myself useful by writing blog posts that I have been meaning to write for a long time (it has been a long time, hasn\u0026rsquo;t it?!).\nIf you\u0026rsquo;re like me, you probably have a bazillion accounts on various Microsoft 365 tenants. I have one for each of my clients, sometimes two (one is a regular user, one is an admin user), plus one for each of my developer tenants, my MVP tenant, and one for when I collaborate with the nicest, most hard-working MVP that I know.\nI have already shared how to use Edge profiles to log on to different tenants and even how to add custom images for each profile, but today I\u0026rsquo;ll show you the next step: creating shortcuts to launch an instance of the Edge browser as a different profile.\nIf you use an Elgato Streamdeck, I\u0026rsquo;ll also show you how you can create keys to launch your browser as a different profile from your Streamdeck.\nCreating a shortcut to launch Edge as a different profile For these instructions, I\u0026rsquo;ll assume that you already have more than one profile on Edge. If you don\u0026rsquo;t, please follow my instructions and come back when you\u0026rsquo;re done. I\u0026rsquo;ll be right here.\nI recently moved to a new computer and I haven\u0026rsquo;t migrated all my accounts yet, but I\u0026rsquo;ll the profiles that I already have set up as an example.\nLet\u0026rsquo;s say that I want to create a shortcut to launch the browser to my Warner.Digital tenant. I\u0026rsquo;d use the following steps:\nBefore we start, we need to know the location of the shortcut we want to create. The shortcut we need consists of three components: [path to your Edge executable] [profile flag] [url]. I usually open a file in Notepad to write down my shortcut path. The first part is easy: you want to find where the Edge executable is installed on your computer. It is most likely \u0026quot;c:\\program files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot;, but we\u0026rsquo;ll confirm it in the next step. The second part of your shortcut is the profile flag. It usually consists of the following: --profile-directory=\u0026quot;Your profile directory\u0026quot;. To find your profile directory, follow these steps: Launch Edge under the profile you wish to use. I\u0026rsquo;m going to use my Warner Digital one for this example While running as the Edge profile you want, in the address bar, type: edge://version and hit Enter In the page that appears, you should find the path to your Edge installation under Executable path, and the path to your profile, under Profile path. NOTE: You may be tempted to use the value from Command-line, but it always points to the wrong profile path \u0026ndash; at least in the version of Edge that I\u0026rsquo;m currently using.\nYou only need the last part after the last \\ of your Profile path. For example, my profile path is D:\\Users\\hugoa\\AppData\\Local\\Microsoft\\Edge\\User Data\\Profile 4, so I\u0026rsquo;ll use Profile 4 We have what we need for the first two parts of your shortcut! My shortcut to launch my Warner Digital profile would be \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=\u0026quot;Profile 4\u0026quot;. Note that if your profile path has any spaces in it, you\u0026rsquo;ll want to use double quotes (\u0026quot;), like I did in mine. If you just want your shortcut to open to a blank tab (or whatever is your default start page for that profile), you don\u0026rsquo;t need to add anything else. However, if you want to launch a particular URL, just add a space, followed by whatever URL you want. For example, to launch SharePoint in the Warner Digital tenant, I\u0026rsquo;d use: \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=\u0026quot;Profile 4\u0026quot; https://warnerdidigal.sharepoint.com Once you have your shortcut path ready, you can use whatever approach you want to create the shortcut. If you want to create shortcuts for your Elgato Streamdeck, just use the path as is (see below). To create a new Windows shortcut, use these steps: In Windows, go to the location where you want your shortcut to be created and select New \u0026gt; Shortcut In the Create Shortcut dialog, you\u0026rsquo;ll be prompted to enter the location of the new item. , just past your new shortcut path and select Next Give your new shortcut a name, for example I used Warner Digital and select Finish. That\u0026rsquo;s all you need! You should be able to add the shortcut to your Start Menu, your task bar, or anywhere on your desktop.\nCreating Shortcuts to open Teams (web-based) using different profiles This is so easy, it probably doesn\u0026rsquo;t warrant a section, but I\u0026rsquo;ll say it anyway: you just need to need to make the URL portion of your shortcut https://teams.microsoft.com.\nThat\u0026rsquo;s it.\nSo, to open Teams in my Warner Digital profile, my shortcut would be: \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=\u0026quot;Profile 4\u0026quot; https://teans.microsoft.com\nCreating a shortcut to call/chat with someone using Teams on a specific profile Also pretty easy, but I thought I\u0026rsquo;d share. Just make the URL portion of the shortcut https://teams.microsoft.com/l/chat/0/0?users=, followed by the email address of the user (or users) you want to chat with.\nFor example, to chat with David Warner, I\u0026rsquo;d use: \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=\u0026quot;Profile 4\u0026quot; https://teams.microsoft.com/l/chat/0/0?users=david.warner@fakeemail.com\nTo chat with David Warner and Luise Freese, I\u0026rsquo;d use: \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=\u0026quot;Profile 4\u0026quot; https://teams.microsoft.com/l/chat/0/0?users=david.warner@fakeemail.com,luise.freese@fakeemail.com\nLaunching a regular meeting using a profile Just like the previous tips, this one is pretty straight forward. Copy the URL from the join link of a Teams meeting, and add it as the URL portion of your shortcut.\nFor example, if I wanted to join the bi-weekly SPFx special interest group community call using my regular profile, I\u0026rsquo;d use: \u0026quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\u0026quot; --profile-directory=Default https://aka.ms/spdev-spfx-call-join\nBONUS SECTION: Putting it all together on an Elgato Streamdeck I have a 15-key Elgato Streamdeck and I really enjoy it. I should probably get myself the XL Stream Deck one of these days\u0026hellip;\nOne thing that many people don\u0026rsquo;t know (I myself learned it from David Warner, who is the king of gadgets) is that you can create folder buttons on your Streamdeck. Your folder can contain a different set of buttons \u0026ndash; or even more folders!\nTo create a folder in Stream deck:\nLaunch your Stream Deck application In the right pane, search for folder and select Create folder from the Stream Deck group Drag the Create folder icon to a blank button on your Stream Deck. After you drop the Create folder icon on a button, it will create a new folder for you. While the new button is selected, you can edit the folder\u0026rsquo;s title or icon, if you wish. If you click on the newly created folder, it will open into the new folder where you can add new buttons or more folders. You can also click on the back arrow icon (on the top left button in the folder) to go back one level. Theoretically, you could create an infinite number of folders with buttons\u0026hellip; so the possibilities are endless.\nHere\u0026rsquo;s how I use my Streamdeck. I\u0026rsquo;m sure there are plenty of other ways to set it up, but this is how I like to set mine up:\nAt the root, I have folder for Edge profiles, one for Teams instances, and one for regular Meetings\nIn my Edge folder, I have all my most frequently used profile. The ones I use for my clients and my personal tenants.\nIn my Teams folder, I have all my frequent Teams clients that I use.\nAnd, finally, in my Meetings folder, I have all the join links for all my regular meetings, as well as some frequent chat buttons.\nOf course, I make sure to select fun icons so I can easily identify which button is for what meeting \u0026ndash; complete with a warrior horse animated GIF for the General Microsoft 365 Special Interest Group bi-weekly call, because: Chris Kent.\nYou may wonder: why wouldn\u0026rsquo;t I just create a folder for each client/team I work with and put my Edge, Teams, and meetings buttons in each client folder? Sometimes I work with more clients than I have buttons available, and I still want to have enough room to have my ZoomIt, PowerPoint presentation, light control, and sound control buttons :-(\nConclusion I hope that this will help you making the most of shortcuts with Edge profile.\nDo you use Edge profile in creative ways? Let me know in the comments.\n","permalink":"https://hugoabernier.github.io/posts/launching-edge-with-different-profiles-using-shortcuts/","tags":["streamdeck","microsoftedge","windows"],"title":"Launching Edge with different profiles using shortcuts"},{"categories":["SPFx"],"contents":"Introduction Scott Hanselman is someone that I admire, both as a Developer and as a Human Being. I never miss a chance to attend his presentations. I‚Äôm not smart enough to understand everything he talks about all the time, but he‚Äôs always entertaining to watch.\nEveryone once in a while, he creates an ultimate list of developer and power tools which always has one or two new tools I didn‚Äôt know about. Any serious developer should look at his list as a great starting point to configure their workstation.\nWhen SPFx first came out, I had never touched Node.js, React, or TypeScript. Visual Studio Code was (in my mind) just a free/lightweight version of Visual Studio ‚Äî why would anyone use VS Code over the full-on Visual Studio?!\nAnd don‚Äôt get me started about GitHub!\nI had a steep learning curve ahead of me. And I had a whole new set of development tools to install on my workstation. It took me a while to figure out what I needed to install to be efficient at creating SPFx solution.\nI‚Äôm in the process of updating my Windows 10 workstation and, as I was writing down the list of things to re-install, I thought I‚Äôd share my list. This list is specifically for people who want to write SPFx solutions on Windows. It isn‚Äôt as comprehensive as Scott‚Äôs list, but I hope that it will help anyone getting started with SPFx development.\nI also work with .NET, Azure, VR and AR, and Dynamics 365, so I have other tools on my workstation, but I wanted to focus on SPFx development.\nIf you develop SPFx solutions and see that I forgot anything here, I would love to hear from you!\nNOTE: I‚Äôm a bit of a minimalist when it comes to installing stuff on my workstation. I hate installing things that will automatically start when I launch windows (that‚Äôs why I never install anything from Adobe anymore). You‚Äôll rarely find anything in this article that will completely change how your operating system works or takes over your machine‚Ä¶ and if you do, it is because I feel that the trade-off is worth it.\nMandatory Node.JS Find the .MSI file in the list that suits your workstation (x86 or x64). As tempting as it may be to download the latest version, don‚Äôt. The only version that is officially supported for SPFx development is 10.x.\nGulp Gulp is a tool that helps automate building your solutions. Once NodeJS is installed, install Gulp by launching the Node.js command prompt and type the following:\nnpm install -g gulp Yeoman Yeoman is a tool that scaffolds solutions. Think of it as the Visual Studio new project wizard, if the new project wizard was command-line driven, open-sourced, and contained a bazillion project types. To install it, use your Node.js command prompt and type:\nnpm install -g yo SharePoint Framework Yeoman Generator Now that Yeoman is installed, you need to add what is essentially your \u0026ldquo;SPFx Project Wizard\u0026rdquo;. To do so, use your Node.js command prompt and type:\nnpm install -g @microsoft/generator-sharepoint Recommended Visual Studio Code When I first started writing SPFx solutions, I refused to use Visual Studio Code (real developers use Visual Studio, right?). Unfortunately, Visual Studio messed up my SPFx solutions more than once and I quickly learned to appreciate Visual Studio Code. Visual Studio no longer messes with your SPFx solutions, but I still use VS Code for all-things-SharePoint.\nGit for Windows Even if your company uses Azure DevOps or TFS for source control, you should install Git to make your life easier when downloading SPFx code samples.\nCmder for Windows If you‚Äôve ever wondered what that cool command-line they use on the SharePoint Development Community calls, you have found it! Follow my instructions if you need help installing it. Fira Code Font This font will add the cool visualization to the Cmder command prompt. You should also configure it as your default Visual Studio Code font Cmder Powerline When paired with the Fira Code font (above), it will add that cool command-prompt to Cmder.\nPostman Test your APIs using this awesome tool. It can even intercept calls and replay them. I use this tool all the time when I‚Äôm trying to understand how SharePoint does something.\nFiddler Use Fiddler to capture your workstation‚Äôs network traffic and diagnose issues. For example, if you want to know how the Microsoft Teams app retrieves your list of groups, use Fiddler to capture what calls it makes.\nCLI for Microsoft 365 CLI A command-line interface that lets you do tons of stuff in Office 365 and SPFx solutions. To install, use your Node.js command prompt and type the following:\nnpm i -g @pnp/cli-microsoft365 PnP PowerShell An awesome library of PowerShell commands that allows you to perform complex provisioning and artifact management actions towards SharePoint. Uses a combination of CSOM and REST behind the scenes, and works against both SharePoint Online as SharePoint On-Premises.\nSharePoint Online Management Shell Use it to create SharePoint Online sites and add users, you can quickly and repeatedly perform tasks much faster than you can in the Office 356 admin center. You can also perform tasks that are not possible to perform in the Office 356 admin center.\nPnP Yeoman Generator If you find yourself always adding the PnP developer controls, PnP Property Controls, PnPJs, unit testing, etc. to your SPFx solutions, you should probably try the PnP Yeoman Generator. It is built on top of the SPFx Yeoman generator, so you‚Äôre not missing out on anything the SPFx generator will give you, but it automatically adds many other useful features ‚Äî like unit testing, code linting, bundle optimization. To install it, use your Node.js command prompt and type:\nnpm install -g @pnp/generator-spfx Visual Studio Code Extensions GitHub Pull Requests Allows you to review and manage GitHub pull requests in Visual Studio Code. Paste JSON as Code Convert JSON object to typescript interfaces as you paste into Visual Studio Code. What, you thought I typed all those classes? Rencore Deploy SPFx Package Easily deploy a SharePoint Framework solution package to SharePoint Online directly from Visual Studio Code.\nRencore SPFx Script Check Using the Rencore Script Check Visual Studio Code extension you can easily reference external libraries in SharePoint Framework projects the right way. Additionally, you can ensure, that the CDN they are using is well performing.\nRencore Tenant-Wide SPFx Extension Deployment Easily add tenant-wide deployment information for your SPFx extension directly from Visual Studio Code.\nSPFx Debug Configuration This Visual Studio Code extension can be used to add the required configuration for debugging your SharePoint Framework.\nSPFx Essentials This is an extension pack that contains useful extension for SharePoint Framework projects. Most of the extensions I listed here are already included in Elio‚Äôs awesome list.\nSPFx Localization This extension for Visual Studio Code makes it easier to work with locale resource files in SharePoint Framework projects. The extension has the ability to export all locale labels to a CSV file to make translations easier to process. With this extension, you have absolutely no excuse to hard-code your text in English within your solutions. SPFx Snippet I never realized how much I use this extension until I tried to write spfx-rcc for a web part on a machine that didn‚Äôt have the extension installed. Take it from the World‚Äôs Laziest Developer, you need this extension. SPFx Task Runner This extension allows you to easily run SharePoint Framework tasks with a couple of mouse clicks. At the moment you can for example list all the available gulp tasks in your project, start the local development server and create debug or release solution packages or pick a task to run from the list of available tasks. SP Formatter Sergei strikes again with a great extension that works with the SP Formatter browser extension to make it easy to use syntax highlighting on list formatting.\nSharePoint Typed Item Sergei‚Äôs awesome extension generates interfaces based on list and content type fields. Also check out Sergei‚Äôs SPFx Rest Client Prettier ‚Äî Code Formatter This extension format your JavaScript / TypeScript / CSS using Prettier.\nSPGo for Visual Studio Code SPGo allows you to develop SharePoint web solutions from your local PC using Visual Studio Code. It pulls down remote folders from SharePoint to your local workspace and automatically publishes files when you save. It is one of those \u0026ldquo;where has this been all my (SharePoint) life?!\u0026rdquo; extensions.\nDocs Authoring Pack If you maintain any kind of Markdown documentation, or if you contribute to Microsoft Docs (you should!), you should install this extension pack that will make your life much easier. Thanks to Paul Bullock for pointing this one out.\nCodeTour CodeTour is an awesome Visual Studio Code extension, which allows you to record and playback guided code walkthroughs. I‚Äôve been using it to add tours to all my new web part projects and adding new tours to my old SPFx samples in the Samples repo. Nice to have TeraCopy If you‚Äôve ever copied your SPFx project files, you know how frustratingly slow Windows can be. TeraCopy is insanely fast (so fast that you‚Äôll think it didn‚Äôt work at first). Don‚Äôt take my word for it: next time you have to copy your SPFx project files, start your copy with Windows. Then, download TeraCopy for Windows, install it, and copy the exact same files using TeraCopy to a separate folder. Then go have a coffee, tell your co-workers that they should install TeraCopy, and go back to your desk. Windows will still be copying the first set of files. Zoomit Be a considerate presenter! If you do presentations and show your code, you should consider installing this tool. Those people in the back of the room (who sat in the back so that they can exit quickly if they find you boring) may not exit so fast if they can actually see what you‚Äôre doing.\nPaint.NET A great image editing tool that‚Äôs fully featured and free. I use it to edit icons and other assets.\nInkscape A powerful SVG editing tool. I use it to create SVG icons. If only I could get SVG icons to work consistently in SPFx, it‚Äôd be great.\nSnagIt Probably the golden standard for screen capture tools. I stubbornly used the Windows Snipping Tool for the longest time until I reluctantly installed SnagIt and I don‚Äôt think I‚Äôll use anything but SnagIt from now on. If you write any kind of documentation, help guides, or blogs, this is a must.\nCamtasia Like SnagIt, I used to avoid it because I was too cheap to pay for the license‚Ä¶ but if you do any kind of video editing, give this one a try. It is fantastic. (Why do I have to be so stubborn?!)\nScreenToGif Do everyone a favour and show an animated GIF of what your SPFx solutions can do in the README.MD file. It saves them having to install your solution to see what it does. This tool is a screen, webcam and sketchboard recorder with an integrated editor that makes it super-easy to create animated GIFs. Available as a Microsoft Store App or a WPF install. Browser Extensions Note that these extensions can be used in Chrome or in Edge Chromium. (I use Edge Chromium, personally).\nSP Editor A Google Chrome Extension for creating and updating files (js, css), injecting files to sites, modifying web/list property bag values (add, edit, remove, index) and creating webhook subscriptions, edit/add/remove web parts from publishing pages and run sp-pnp-js typescript snippets in SP2013, SP2016 and SharePoint Online from Chrome Developer Tools. This tool will help you create amazing SharePoint applications fast from your browser from any computer which runs Chrome!\nReact Developer Tools Allows you to inspect the React component hierarchies in the Chrome Developer Tools. You get a new tab called React in your Chrome DevTools which shows you the root React components that were rendered on the page, as well as the subcomponents that they ended up rendering. It is great when trying to understand how the SharePoint team built a component.\nScreen Reader for Google Chrome Test your web parts for accessibility by giving you the same experience your users will get when they use a screen reader.\nAXE No, not the body spray. Use this tool to check for accessibility for WCAG 2.0 and Section 508 accessibility. If you aren‚Äôt testing for accessibility, you‚Äôre possibly making it difficult for 10 to 20% of your users.\nRefined GitHub If you use GitHub regularly, but get a little annoyed with some missing features, this extension is for you. It adds tons of cool features including my favorites: remove changes to individual files in a commit/pull request and download a folder. SP Formatter Not so much a developer-focused extension, but a very useful one nevertheless. SP Formatter adds JSON syntax highlighting, live preview, and autocompletion to SharePoint list formatting. Websites PnP Home Can‚Äôt keep up with all the new things that the Microsoft 365 PnP community members are doing? You can find everything in one convenient place. SharePoint Look Book Get inspired with cool looking SharePoint sites. SharePoint Design Guidance Learn how to create great looking SharePoint solutions. Office Fluent UI See what components are at your disposal when building awesome Office 365 solutions.\nSharePoint Dev Platform Uservoice Request new features and see what the team is working on.\nPnP/PnPJS PnPjs is a collection of fluent libraries for consuming SharePoint, Graph, and Office 365 REST APIs in a type-safe way. You can use it within SharePoint Framework, Nodejs, or any JavaScript project. This an open source initiative and we encourage contributions and constructive feedback from the community.\nReusable property pane controls for the SharePoint Framework solutions This repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions. Reusable React controls for your SharePoint Framework solutions Provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions. You should really try the ChartControl üôÇ Microsoft 365 \u0026amp; SharePoint Community ‚Äì PnP (YouTube) YouTube channel with SharePoint Dev Weekly videos, SharePoint Framework Tutorials and Training videos, SharePoint Framework and Extensions Tutorials, Getting Started videos, PnP Webcasts, etc. If you no like read, you watch these good.\nBase64 Image Encoder Use this site to encode your web part icons to base 64. You can also use my interactive post to do all the work for you. EzGif.com If you don‚Äôt want to install ScreenToGif but want to create animated GIFs to help people see what your web part will look like without having to install it, I recommend using this web site. Create a video of your web part in action, then use EZ GIF‚Äôs Video to animated GIF converter to create your GIF. Add the GIF to your README.MD file and people will see how cool your web part really is! GitHub Repos Microsoft Fluent UI When I want to learn how to create awesome React components, I take my inspiration from Office UI Fabric Microsoft Fluent UI.\nSP Dev FX WebParts Almost every SPFx project I create starts from one of the many samples available on this awesome repo.\nPnP Property Controls Back when most of us were still learning React and SPFx, they were already creating re-usable controls for SPFx. Take some time to read their code for inspiration.\nPnP Developer Controls From the brilliant minds that brought you the PnP Property Controls. Read the code to learn tons!\nSharePoint Starter Kit Look at some of the best solutions used to build the perfect demo environments.\nConclusion This article listed the various tools I use when building SPFx solutions on a Windows 10 workstation. As I stated previously, I‚Äôm kind of a minimalist when it comes to installing stuff on my machine. I‚Äôm sure that there are many other tools that I should install, but I haven‚Äôt found a need for it yet. What other tools do you install on your workstation? Let me know in the comments.\nUpdate Feb 4, 2021: Added SP Formatter VS Code Extension. Mind.blown. September 7, 2020: Added Enhanced GitHub. July 9, 2020: Refreshed links and added CodeTour, SP Formatter and the PnP Landing Page. April 27, 2020: Added Docs Authoring Pack. December 06, 2019: Updated version of Node.js to 10.x. October 10, 2019: I added SPGo after attending Beau Cameron and David Warner II‚Äòs great SharePoint Saturday New England session about SPFx Development Tips from the trenches. Watching those two present together reminded me that there is always room to learn more. July 2, 2019: Thanks to Denis Molodtsov for suggesting ScreenToGif instead of using EzGif. It makes it so much easier to capture an animated GIF of your web part in action! April 4, 2019: Added SharePoint Developer Community ‚Äì PnP YouTube channel March 28, 2019: Added [Sergei Sergeev‚Äôs] cool SPFx Typed Item extension, which he demoed in the March 28th SharePoint Dev Ecosystem call. Watch out for those Kung-fu Gophers. March 25, 2019: Thanks to Thomas Lamb for suggesting Prettier ‚Äî Code Formatter. March 20, 2019: Thanks to Sam Culver for pointing out that Fira Code makes a great font in Visual Studio. March 16, 2019: Added Paint.NET and Inkscape as graphical tools. March 14, 2019: Thanks to Miguel Isidoro for pointing out that I had the wrong link to the Rencore SPFx Script Check. Credits Header image by Rudy and Peter Skitterians from Pixabay\n","permalink":"https://hugoabernier.github.io/posts/ultimate-developer-tool-list-for-spfx/","tags":["React","SPFx"],"title":"Ultimate Developer Tool List for SPFx"}]